//-----Envelopes-----

usersfolder
{
	"Documents folder"
	"Pictures folder"
	"Music folder"
	"Games folder"
	"Videos folder" 
	"Recycle Bin"
	"Downloads folder"
	"Programs folder"
	"Internet bookmarks"
	
}

filetype
{
	".txt"
	".dic"
	".png"
	".jpg"
	".jpeg"
	".mp3"
	".exe"
	".bat"
	".cfg"
	".wav"
	".pdf"
	".dat"
	".gif"
	".tiff"
	".dll"
	".pna"
	".ico"
	".dau"
	".zip"
	".nar"
	".html"
	".psd"
	".mp4"
	".ttf"
	".rar"
	".psd"

}

adoptablepet
{
	"cat"
	"dog"
	"fish"
	"hamster"
	"snake"
	"lizard"
	"mouse"
	"rat"
	"rabbit"

}
foodenvelope {

	"pizza"
	"spaghetti with meatballs"
	"onigiri"
	"karaage"
	"natto"
	"katsudon"
	"oyakodon"
	"okonomiyaki"
	"calamari"
	"fried rice"
	"taiyaki"
	"wagashi"
	"dorayaki"
	"tempura shrimp"
	"udon"
	"soba"
	"ramen"
	"curry and rice"
	"takoyaki"
	"yakitori"
	"kakigōri"
	"sukiyaki"
	"miso soup"
	"grilled unagi"
	"dango"
	"tonkatsu"	
	"oden"
	"chicken nanban"
}


drinkenvelope{
	"canned coffee"
	"calpis"
	"pocari sweat"
	"green tea"
	"sake"
	"shochu"
	"ramune"
	"mitsuya cider"
	"hojicha"
	"milk tea"
	"fanta"
	"apple juice"
}

bugenvelope:nonoverlap{

	"ant"
	"antlion"
	"cricket"
	"ladybug"
	"stink bug"
	"Hercules beetle"
	"true katydid"
	"praying mantis"
	"house spider"
	"caterpillar"
	"pillbug"
	"bumblebee"
	"wolf spider"
	"long locust"
	"grasshopper"
	"cicada"
	"walking stick"
	"parasitic wasp"

}
//dateportrait
KDP
{
	if spoilerToggle == "major"; 10
	else; ""
}


//-----pronounin-----
subjectP //subject - they
{
   pronounsArray[1]

}

objectP //object - them
{
   pronounsArray[2]

}

possessiveD //possessive determiner - their
{
   pronounsArray[3]

}

possessiveP //possessive pronoun - theirs
{
	pronounsArray[4]

}

reflexiveP { //themself

	pronounsArray[5]

}

contraction
{
	if pronounsArray [0] == "singular"; pronounsArray[1] + "'s"
	else; pronounsArray[1] + "'re"
}

isare 
{
	if pronounsArray [0] == "singular"; "is"
	else; "are"
}

hashave
{
	if pronounsArray [0] == "singular"; "has"
	else; "have"
}

verbS //tack onto end of verb, like run%(verbS)
{
	if pronounsArray [0] == "singular"; "s"
	else; ""
}

verbES //tack onto end of verb, like catch%(verbS)
{
	if pronounsArray [0] == "singular"; "es"
	else; ""
}

verbYIES //tack onto end of verb, like worr%(verbS) -> worries or worry
{
	if pronounsArray [0] == "singular"; "ies"
	else; "y"
}

//----------menu
season //Current season
{
	if hemisphere == "Southern"
	{
		if month > 2 && month < 6; "Autumn"
		elseif month > 5 && month < 9; "Winter"
		elseif month > 8 && month < 12; "Spring"
		else; "Summer"
	}
	else
	{
		if month > 2 && month < 6; "Spring"
		elseif month > 5 && month < 9; "Summer"
		elseif month > 8 && month < 12; "Autumn"
		else; "Winter"
	}
}

//hour12 displays the hour like a 12 hour clock, except for 12 which is displayed as 0
nowhour
{
	if hour12 == 0; "12"
	else; "%(hour12)"
}

//Adding a 0 to the minute if it's under 10
nowmin
{
	if minute < 10; "0%(minute)"
	else; "%(minute)"
}

//Total hours
totalhours {x.up_total / 60}

//Total hours + minutes
totalruntime
{
	_hours = x.up_total / 60
	_mins = x.up_total % 60
	if _mins <= 9; _mins = "0%(_mins)"
	
	"%(_hours):%(_mins)"
}

//Current runtime as hours + minutes
runtime
{
	_hours = x.up_mins / 60
	_mins = x.up_mins % 60
	if _mins <= 9; _mins = "0%(_mins)"
	
	"%(_hours):%(_mins)"
}

//AM or PM - ampm is 0 during am, and 1 during pm
ap
{
 	if ampm == 0; "AM"
 	else; "PM"
}

//Abbreviated week day
wd
{
	if weekday == 0; "Sun"
	elseif weekday == 1; "Mon"
	elseif weekday == 2; "Tue"
	elseif weekday == 3; "Wed"
	elseif weekday == 4; "Thu"
	elseif weekday == 5; "Fri"
	else; "Sat"
}

//Full week day
nowday
{
	_weekday = weekday
	if _argv[0] == "next"
	{
		_weekday++
		if _weekday > 6; _weekday = 0
	}
	if _argv[0] == "last"
	{
		_weekday--
		if _weekday < 0; _weekday = 6
	}
	
	if GETTYPE(_argv[0]) == 1 //If it's an integer
	{
		while _argv[0] > 6; {_argv[0] -= 7}
		while _argv[0] < 0; {_argv[0] += 7}
		_weekday = _argv[0]
	}
	
	if _weekday == 0; "Sunday"
	elseif _weekday == 1; "Monday"
	elseif _weekday == 2; "Tuesday"
	elseif _weekday == 3; "Wednesday"
	elseif _weekday == 4; "Thursday"
	elseif _weekday == 5; "Friday"
	else; "Saturday"
}

//The current month name
nowmonth
{
	_month = month
	
	if _argv[0] == "next"
	{
		_month++
		if _month > 12; _month = 1
	}
	if _argv[0] == "last"
	{
		_month--
		if _month < 1; _month = 12
	}
	
	if GETTYPE(_argv[0]) == 1 //If it's an integer
	{
		while _argv[0] > 12; {_argv[0] -= 12}
		while _argv[0] < 1; {_argv[0] += 12}
		_month = _argv[0]
	}
	
	if _month == 1; "January"
	elseif _month == 2; "February"
	elseif _month == 3; "March"
	elseif _month == 4; "April"
	elseif _month == 5; "May"
	elseif _month == 6; "June"
	elseif _month == 7; "July"
	elseif _month == 8; "August"
	elseif _month == 9; "September"
	elseif _month == 10; "October"
	elseif _month == 11; "November"
	else; "December"
}

//Checks if this is a leap year
leapyear
{
	if year % 4 != 0; 0
	elseif year % 100 != 0; 1
	elseif year % 400 != 0; 0
	else; 1
}

//Gets the day of the year it currently is, starting from 1 because starting from 0 here is silly
yearday {GETTIME[7] + 1}

yearweek
{
	//Get the current day of the year
	_days = yearday

	//Get the number of days into the current week that we are
	_trailingdays = 0
	while weekday - _trailingdays >= 0
	{
		_trailingdays++
	}

	//Get the number of weeks minus leading and trailing days
	_days -= _trailingdays
	_weeks = _days / 7
	_leadingdays = _days % 7

	//Add in the trailing weeks
	if _leadingdays > 0; _weeks++
	if _trailingdays > 0; _weeks++

	//Handles week 53
	if _weeks == 53
	{
		_daysleft = 31 - day
		if _daysleft + _trailingdays < 7; _weeks = 1
	}
	_weeks
}

//From the GT template. Breaking down the day into a few distinct chunks so you dont have to add checks for every hour.
timeslot
{
	if hour >= 5 && hour <= 8; "earlymorning" //5-8am
	elseif hour >= 9 && hour <= 11; "morning" //9-11am
	elseif hour >= 12 && hour <= 14; "lunch" //12-2pm
	elseif hour >= 15 && hour <= 17; "afternoon" //3-5pm
	elseif hour >= 18 && hour <= 20; "evening" //6-8pm
	elseif hour >= 21 && hour <= 24; "latenight" //9pm-12am
	else; "midnight" //1-4am
}